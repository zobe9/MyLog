第五章 函数
  可变参数：前面的实参传给函数固定的参数，后面的实参存放在arg表中
    a、亚元（_） --使用亚元获取想要的返回值
    b、自定义选择函数
    
  命名参数：？？ P37
  
第六章 再论函数
  第一类值：函数 -> 变量、表、函数参数，返回值  --  a = {p = print}
  词法定界：嵌套的函数可以访问外部函数中的变量
  定义函数：function(x) ... end  
  创建表： {}
  
  排序函数：
  table.sort(network, function (a,b)
	return (a.name > b.name)
  end)   ？？排序结果有问题
  
  闭包：
  内部函数使用外部函数变量这个变量称为外部的局部变量或者 upvalue 
  注：同一函数同一个外部局部变量，不同实例有自己所属的变量值，不同的闭包（类似线程）
  典型的闭包结构包含两个函数：闭包自己；工厂(创建闭包的函数)
  
  非全局函数：(作为表的域)
  函数赋值给局部变量 -->  局部函数 注：有作用域限制，如果存在(非直接)递归要先声明
  
  正确的尾调用：函数的最后一个动作是调用另外一个函数(递归)
  注：尾调用后栈中不需再保留调用者的任何信息，调用后还要做处理的不属于尾调用，类型 goto
  
  ipairs 与 pairs函数返回值：
  都返回 key  和  value
  ipairs(arg)  key必须是从 1 开始且要连续
  pairs(arg)   表中的元素全部返回
  
第七章 迭代器与泛型for
  迭代器的创建：it = func_iter(...) 
  调用迭代器：local element = it()
  注：与局部函数定义区分开
  
  泛型for执行顺序：
    1、计算in后面表达式的值(迭代函数、状态常量、控制变量)
    2、将状态常量和控制变量作为参数调用迭代函数
    3、迭代函数返回值赋给变量列表
    4、返回值为nil结束循环
    5、回到第二步再次迭代函数
    for var_1, ..., var_n in explist do block end
                   ||  
    local _f, _s, _var = explist
    while true do
     local var_1, ... , var_n = _f(_s, _var)
     _var = var_1
     if _var == nil then break end
     block
    end
  
  
  
